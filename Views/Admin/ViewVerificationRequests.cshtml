@model PaginatedList<Verification>

@{
    ViewData["Title"] = "View Verification Requests";
}
<p>
    <a asp-action="Index"></a>
</p>
<h2 class="text-white">View All Verification Requests</h2>
<h3 class="text-white">Approve or decline verification requests for Users 18+</h3>

<form asp-action="ViewVerificationRequests" method="get">
    <div class="form-actions no-color">
<p class="text-white d-inline-block">
    Search by user ID: <input type="text" name="SearchString" value="@ViewData["CurrentFilter"]" />
    <input type="submit" value="Search" class="btn btn-primary" />
</p>
<a class="btn btn-secondary d-inline-block ml-2" asp-action="ViewVerificationRequests">Refresh</a>
    </div>
</form>

<table class="table table-dark table-striped table-hover">
    <thead>
        <tr>
            <th class ="text-white">
                <a asp-action="ViewVerificationRequests" asp-route-sortOrder="@ViewData["StatusSortParam"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Status</a>
            </th>
            <th>
                User ID
            </th>
            <th class="text-white">
                <a asp-action="ViewVerificationRequests" asp-route-sortOrder="@ViewData["DateOfRequestSortParam"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Date Of Request</a>
            </th>
            <th>

            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Status)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.UserID)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DateOfRequest)
                </td>
                <td>
                    <a asp-action="UpdateVerificationRequest" asp-route-verificationId="@item.VerificationID">Update</a>
                </td>
            </tr>
        }
    </tbody>
</table>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="ViewVerificationRequests" asp-route-sortOrder="@ViewData["CurrentSort"]" asp-route-pageNumber="@(Model.PageIndex - 1)" asp-route-currentFilter="@ViewData["CurrentFilter"]" class="btn btn-primary @prevDisabled">Previous</a>
<a asp-action="ViewVerificationRequests" asp-route-sortOrder="@ViewData["CurrentSort"]" asp-route-pageNumber="@(Model.PageIndex + 1)" asp-route-currentFilter="@ViewData["CurrentFilter"]" class="btn btn-primary @nextDisabled">Next</a>